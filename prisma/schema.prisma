// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"  // Start with SQLite for easy development
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  
  // Basic Info
  name      String
  email     String?  @unique  // Optional for local artisans
  phone     String   @unique  // Primary contact method
  password  String
  
  // Personal Details
  gender    String?  // "male", "female", "other"
  age       Int?
  
  // Location Details
  address   String?
  city      String
  state     String
  district  String?
  pincode   String?
  
  // Artisan-specific fields
  craftType String?  // "pottery", "weaving", "jewelry", etc.
  experience Int?    // years of experience
  languages String?  // JSON string of languages spoken
  
  // Platform details
  role      String   @default("artisan")
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products       Product[]
  buyerOrders    Order[]   @relation("buyerOrders")
  artisanOrders  Order[]   @relation("artisanOrders")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int      // store in paise/cents
  stock       Int      @default(0)
  imageUrl    String?

  artisan     User     @relation(fields: [artisanId], references: [id])
  artisanId   String

  // Back relations
  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  buyer       User     @relation("buyerOrders", fields: [buyerId], references: [id])
  buyerId     String
  artisan     User     @relation("artisanOrders", fields: [artisanId], references: [id])
  artisanId   String
  status      String   @default("pending") // pending, completed, cancelled
  totalAmount Int
  address     String
  buyerCity   String?
  buyerState  String?

  items       OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  unitPrice Int     // snapshot price at order time (paise)

  @@map("order_items")
}